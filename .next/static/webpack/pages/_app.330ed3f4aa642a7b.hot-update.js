"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "(pages-dir-browser)/./lib/firebase.js":
/*!*************************!*\
  !*** ./lib/firebase.js ***!
  \*************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addTask: () => (/* binding */ addTask),\n/* harmony export */   addTeamClient: () => (/* binding */ addTeamClient),\n/* harmony export */   addTeamEmployee: () => (/* binding */ addTeamEmployee),\n/* harmony export */   addTeamProject: () => (/* binding */ addTeamProject),\n/* harmony export */   applyTaskFilters: () => (/* binding */ applyTaskFilters),\n/* harmony export */   canUserAccessEmployee: () => (/* binding */ canUserAccessEmployee),\n/* harmony export */   canUserAccessTeam: () => (/* binding */ canUserAccessTeam),\n/* harmony export */   deleteTask: () => (/* binding */ deleteTask),\n/* harmony export */   getAccessibleTeams: () => (/* binding */ getAccessibleTeams),\n/* harmony export */   getFilterOptions: () => (/* binding */ getFilterOptions),\n/* harmony export */   getFilteredTasks: () => (/* binding */ getFilteredTasks),\n/* harmony export */   getPredefinedValues: () => (/* binding */ getPredefinedValues),\n/* harmony export */   getTasks: () => (/* binding */ getTasks),\n/* harmony export */   getTeamClients: () => (/* binding */ getTeamClients),\n/* harmony export */   getTeamDropdownData: () => (/* binding */ getTeamDropdownData),\n/* harmony export */   getTeamEmployees: () => (/* binding */ getTeamEmployees),\n/* harmony export */   getTeamProjects: () => (/* binding */ getTeamProjects),\n/* harmony export */   getTeams: () => (/* binding */ getTeams),\n/* harmony export */   getUserProfile: () => (/* binding */ getUserProfile),\n/* harmony export */   getWeeklyTasks: () => (/* binding */ getWeeklyTasks),\n/* harmony export */   initializeTeamDefaults: () => (/* binding */ initializeTeamDefaults),\n/* harmony export */   isPredefinedField: () => (/* binding */ isPredefinedField),\n/* harmony export */   saveTeamDropdownData: () => (/* binding */ saveTeamDropdownData),\n/* harmony export */   teamExists: () => (/* binding */ teamExists),\n/* harmony export */   updateTask: () => (/* binding */ updateTask),\n/* harmony export */   updateUserProfile: () => (/* binding */ updateUserProfile)\n/* harmony export */ });\n/* harmony import */ var _firebaseConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./firebaseConfig */ \"(pages-dir-browser)/./lib/firebaseConfig.js\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/firestore */ \"(pages-dir-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n// lib/firebase.js - Updated with user context filtering\n\n\n// -------------------- PREDEFINED VALUES --------------------\nconst PREDEFINED_VALUES = {\n    percentageCompletion: [\n        '5',\n        '10',\n        '25',\n        '40',\n        '50',\n        '65',\n        '75',\n        '85',\n        '90',\n        '100'\n    ],\n    status: [\n        'Completed',\n        'In Progress',\n        'On Hold'\n    ],\n    workType: [\n        'Full-day',\n        'Half-day',\n        'Relaxation'\n    ]\n};\n// -------------------- USER MANAGEMENT --------------------\n// Get user profile\nconst getUserProfile = async (userId)=>{\n    try {\n        const userDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_firebaseConfig__WEBPACK_IMPORTED_MODULE_0__.db, 'users', userId));\n        if (userDoc.exists()) {\n            return userDoc.data();\n        }\n        return null;\n    } catch (error) {\n        console.error('Error getting user profile:', error);\n        return null;\n    }\n};\n// Update user profile\nconst updateUserProfile = async (userId, profileData)=>{\n    try {\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.setDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_firebaseConfig__WEBPACK_IMPORTED_MODULE_0__.db, 'users', userId), profileData, {\n            merge: true\n        });\n    } catch (error) {\n        console.error('Error updating user profile:', error);\n        throw error;\n    }\n};\n// -------------------- TASKS WITH USER CONTEXT --------------------\nconst addTask = async (task, userProfile)=>{\n    try {\n        if (userProfile.role === 'tech-lead') {\n            task.teamName = 'techLeads';\n        }\n        // Validate user can add task to this team/employee\n        if (!canUserAccessEmployee(userProfile, task.teamName, task.empId)) {\n            throw new Error('You do not have permission to add tasks for this employee');\n        }\n        // Create the defalut team name...\n        await initializeTeamDefaults(task.teamName);\n        // Ensure date document exists\n        const dateRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_firebaseConfig__WEBPACK_IMPORTED_MODULE_0__.db, 'teams', task.teamName, 'dates', task.date);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.setDoc)(dateRef, {\n            createdAt: new Date().toISOString()\n        }, {\n            merge: true\n        });\n        // Ensure employee document exists with name\n        const empRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_firebaseConfig__WEBPACK_IMPORTED_MODULE_0__.db, 'teams', task.teamName, 'dates', task.date, 'employees', task.empId);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.setDoc)(empRef, {\n            name: task.empName\n        }, {\n            merge: true\n        });\n        // Auto-save new employee to team employees if not exists\n        if (task.empId && task.empName) {\n            await addTeamEmployee(task.teamName, task.empId, task.empName);\n        }\n        // Auto-save new client to team clients if not exists\n        if (task.clientId && task.clientName) {\n            await addTeamClient(task.teamName, task.clientId, task.clientName);\n        }\n        // Auto-save new project to team projects if not exists\n        if (task.projectId && task.projectName) {\n            await addTeamProject(task.teamName, task.projectId, task.projectName);\n        }\n        const docRef = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(_firebaseConfig__WEBPACK_IMPORTED_MODULE_0__.db, 'teams', task.teamName, 'dates', task.date, 'employees', task.empId, 'tasks'), {\n            ...task,\n            createdAt: new Date().toISOString(),\n            createdBy: userProfile.empId\n        });\n        // Return full task object with ID for consistency\n        return {\n            ...task,\n            id: docRef.id,\n            createdAt: new Date().toISOString(),\n            createdBy: userProfile.empId\n        };\n    } catch (error) {\n        console.error('Error adding task:', error);\n        throw error;\n    }\n};\n// Get tasks based on user permissions\nconst getTasks = async function(userProfile) {\n    let teamFilter = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;\n    try {\n        if (!userProfile) {\n            throw new Error('User profile is required');\n        }\n        let allTasks = [];\n        // Determine which teams user can access\n        let accessibleTeams;\n        switch(userProfile.role){\n            case 'tech-lead':\n                accessibleTeams = [\n                    ...userProfile.managedTeams || [],\n                    'techLeads'\n                ];\n                break;\n            case 'team-leader':\n            case 'employee':\n                accessibleTeams = [\n                    userProfile.teamName\n                ];\n                break;\n            default:\n                return [];\n        }\n        // Apply team filter if provided\n        if (teamFilter && teamFilter !== 'all') {\n            accessibleTeams = accessibleTeams.filter((team)=>team === teamFilter);\n        }\n        // Fetch tasks from accessible teams\n        for (const teamName of accessibleTeams){\n            const datesSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(_firebaseConfig__WEBPACK_IMPORTED_MODULE_0__.db, 'teams', teamName, 'dates'));\n            for (const dateDoc of datesSnapshot.docs){\n                const date = dateDoc.id;\n                const employeesSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(_firebaseConfig__WEBPACK_IMPORTED_MODULE_0__.db, 'teams', teamName, 'dates', date, 'employees'));\n                for (const empDoc of employeesSnapshot.docs){\n                    const empId = empDoc.id;\n                    // Check if user can access this employee's data\n                    if (!canUserAccessEmployee(userProfile, teamName, empId)) {\n                        continue;\n                    }\n                    const tasksSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(_firebaseConfig__WEBPACK_IMPORTED_MODULE_0__.db, 'teams', teamName, 'dates', date, 'employees', empId, 'tasks'));\n                    const empTasks = tasksSnapshot.docs.map((taskDoc)=>({\n                            teamName,\n                            date,\n                            empId,\n                            ...taskDoc.data(),\n                            id: taskDoc.id\n                        }));\n                    allTasks = [\n                        ...allTasks,\n                        ...empTasks\n                    ];\n                }\n            }\n        }\n        return allTasks;\n    } catch (error) {\n        console.error('Error getting tasks:', error);\n        throw error;\n    }\n};\n// Update a task (with user permission check)\nconst updateTask = async (teamName, date, empId, taskId, taskData, userProfile)=>{\n    try {\n        // Check if user can update this task\n        if (!canUserAccessEmployee(userProfile, teamName, empId)) {\n            throw new Error('You do not have permission to update this task');\n        }\n        const taskRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_firebaseConfig__WEBPACK_IMPORTED_MODULE_0__.db, 'teams', teamName, 'dates', date, 'employees', empId, 'tasks', taskId);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(taskRef, {\n            ...taskData,\n            updatedAt: new Date().toISOString(),\n            updatedBy: userProfile.empId\n        });\n    } catch (error) {\n        console.error('Error updating task:', error);\n        throw error;\n    }\n};\n// Delete a task (with user permission check)\nconst deleteTask = async (teamName, date, empId, taskId, userProfile)=>{\n    try {\n        // Check if user can delete this task\n        if (!canUserAccessEmployee(userProfile, teamName, empId)) {\n            throw new Error('You do not have permission to delete this task');\n        }\n        const taskRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_firebaseConfig__WEBPACK_IMPORTED_MODULE_0__.db, 'teams', teamName, 'dates', date, 'employees', empId, 'tasks', taskId);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.deleteDoc)(taskRef);\n    } catch (error) {\n        console.error('Error deleting task:', error);\n        throw error;\n    }\n};\n// -------------------- PERMISSION HELPERS --------------------\n// Check if user can access specific team\nconst canUserAccessTeam = (userProfile, teamName)=>{\n    if (!userProfile) {\n        console.log('No user profile provided');\n        return false;\n    }\n    console.log(\"Checking access for user \".concat(userProfile.empId, \" (\").concat(userProfile.role, \") to team \").concat(teamName));\n    switch(userProfile.role){\n        case 'tech-lead':\n            var _userProfile_managedTeams;\n            // Tech leads can access:\n            // 1. Teams they manage (from managedTeams array)\n            // 2. The special 'techLeads' team for their personal tasks\n            const canAccessManagedTeam = (_userProfile_managedTeams = userProfile.managedTeams) === null || _userProfile_managedTeams === void 0 ? void 0 : _userProfile_managedTeams.includes(teamName);\n            const canAccessTechLeadsTeam = teamName === 'techLeads';\n            const techLeadAccess = canAccessManagedTeam || canAccessTechLeadsTeam;\n            console.log('Tech lead access check:', {\n                managedTeams: userProfile.managedTeams,\n                requestedTeam: teamName,\n                canAccessManagedTeam,\n                canAccessTechLeadsTeam,\n                finalAccess: techLeadAccess\n            });\n            return techLeadAccess;\n        case 'team-leader':\n        case 'employee':\n            const regularAccess = userProfile.teamName === teamName;\n            console.log('Regular user access:', {\n                userTeam: userProfile.teamName,\n                requestedTeam: teamName,\n                access: regularAccess\n            });\n            return regularAccess;\n        default:\n            console.log('Unknown role:', userProfile.role);\n            return false;\n    }\n};\n// Check if user can access specific employee's data\nconst canUserAccessEmployee = (userProfile, teamName, empId)=>{\n    if (!userProfile) return false;\n    switch(userProfile.role){\n        case 'tech-lead':\n            return userProfile.managedTeams.includes(teamName);\n        case 'team-leader':\n            return userProfile.teamName === teamName;\n        case 'employee':\n            return userProfile.teamName === teamName && userProfile.empId === empId;\n        default:\n            return false;\n    }\n};\n// Get accessible teams for current user\nconst getAccessibleTeams = (userProfile)=>{\n    if (!userProfile) return [];\n    switch(userProfile.role){\n        case 'tech-lead':\n            return userProfile.managedTeams;\n        case 'team-leader':\n        case 'employee':\n            return [\n                userProfile.teamName\n            ];\n        default:\n            return [];\n    }\n};\n// -------------------- FILTER BASED ON ROLES --------------------\nconst getFilterOptions = async (userProfile)=>{\n    try {\n        const options = {\n            teamLeaders: [],\n            employees: [],\n            teams: []\n        };\n        if (!userProfile) return options;\n        if (userProfile.role === 'tech-lead') {\n            // Tech leads can filter by teams they manage, team leaders, and employees\n            options.teams = userProfile.managedTeams || [];\n            // Get team leaders and employees from managed teams\n            const teamLeadersSet = new Set();\n            const employeesSet = new Set();\n            for (const teamName of userProfile.managedTeams){\n                try {\n                    // Get team leaders\n                    const teamLeadersQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(_firebaseConfig__WEBPACK_IMPORTED_MODULE_0__.db, 'users'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)('role', '==', 'team-leader'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)('teamName', '==', teamName));\n                    const teamLeadersSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(teamLeadersQuery);\n                    teamLeadersSnapshot.forEach((doc)=>{\n                        const data = doc.data();\n                        teamLeadersSet.add(JSON.stringify({\n                            empId: data.empId,\n                            empName: data.empName,\n                            teamName: data.teamName\n                        }));\n                    });\n                    // Get employees\n                    const employeesQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(_firebaseConfig__WEBPACK_IMPORTED_MODULE_0__.db, 'users'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)('role', '==', 'employee'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)('teamName', '==', teamName));\n                    const employeesSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(employeesQuery);\n                    employeesSnapshot.forEach((doc)=>{\n                        const data = doc.data();\n                        employeesSet.add(JSON.stringify({\n                            empId: data.empId,\n                            empName: data.empName,\n                            teamName: data.teamName\n                        }));\n                    });\n                } catch (error) {\n                    console.error(\"Error loading data for team \".concat(teamName, \":\"), error);\n                }\n            }\n            options.teamLeaders = Array.from(teamLeadersSet).map((item)=>JSON.parse(item));\n            options.employees = Array.from(employeesSet).map((item)=>JSON.parse(item));\n        } else if (userProfile.role === 'team-leader') {\n            // Team leaders can filter by employees in their team + themselves\n            try {\n                const employees = [];\n                // Add themselves as an option to filter their own tasks\n                employees.push({\n                    empId: userProfile.empId,\n                    empName: \"\".concat(userProfile.empName, \" (Me)\"),\n                    teamName: userProfile.teamName,\n                    isCurrentUser: true\n                });\n                // Get employees in their team\n                const employeesQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(_firebaseConfig__WEBPACK_IMPORTED_MODULE_0__.db, 'users'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)('role', '==', 'employee'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)('teamName', '==', userProfile.teamName));\n                const employeesSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(employeesQuery);\n                employeesSnapshot.forEach((doc)=>{\n                    const data = doc.data();\n                    employees.push({\n                        empId: data.empId,\n                        empName: data.empName,\n                        teamName: data.teamName,\n                        isCurrentUser: false\n                    });\n                });\n                options.employees = employees;\n            } catch (error) {\n                console.error('Error loading employees:', error);\n            }\n        }\n        // Employees only get date filters (no additional options needed)\n        return options;\n    } catch (error) {\n        console.error('Error loading filter options:', error);\n        return {\n            teamLeaders: [],\n            employees: [],\n            teams: []\n        };\n    }\n};\n// -------------------- Get Weekly Task For Current User Only!!! --------------------\nconst getWeeklyTasks = async (userProfile, startDate, endDate)=>{\n    try {\n        if (!userProfile) {\n            throw new Error('User profile is required');\n        }\n        let allTasks = [];\n        // Determine which teams user can access (same as getTasks)\n        let accessibleTeams;\n        switch(userProfile.role){\n            case 'tech-lead':\n                accessibleTeams = [\n                    ...userProfile.managedTeams || [],\n                    'techLeads'\n                ];\n                break;\n            case 'team-leader':\n            case 'employee':\n                accessibleTeams = [\n                    userProfile.teamName\n                ];\n                break;\n            default:\n                return [];\n        }\n        // For weekly report, we assume it's for the current user only (employee view)\n        // If tech-lead or team-leader, they can choose, but for simplicity, filter to own tasks\n        const targetEmpId = userProfile.empId; // Own tasks only for report\n        // Fetch tasks from accessible teams within date range\n        for (const teamName of accessibleTeams){\n            // Query dates between start and end\n            const datesQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(_firebaseConfig__WEBPACK_IMPORTED_MODULE_0__.db, 'teams', teamName, 'dates'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)('__name__', '>=', startDate), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)('__name__', '<=', endDate));\n            const datesSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(datesQuery);\n            for (const dateDoc of datesSnapshot.docs){\n                const date = dateDoc.id;\n                const employeesSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(_firebaseConfig__WEBPACK_IMPORTED_MODULE_0__.db, 'teams', teamName, 'dates', date, 'employees'));\n                for (const empDoc of employeesSnapshot.docs){\n                    const empId = empDoc.id;\n                    // Only fetch own tasks for report\n                    if (empId !== targetEmpId) {\n                        continue;\n                    }\n                    const tasksSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(_firebaseConfig__WEBPACK_IMPORTED_MODULE_0__.db, 'teams', teamName, 'dates', date, 'employees', empId, 'tasks'));\n                    const empTasks = tasksSnapshot.docs.map((taskDoc)=>({\n                            teamName,\n                            date,\n                            empId,\n                            ...taskDoc.data(),\n                            id: taskDoc.id\n                        })).filter((task)=>{\n                        // Filter by time if start/end have time, but since dates are YYYY-MM-DD, it's fine\n                        return task.date >= startDate && task.date <= endDate;\n                    });\n                    allTasks = [\n                        ...allTasks,\n                        ...empTasks\n                    ];\n                }\n            }\n        }\n        return allTasks.sort((a, b)=>new Date(a.date) - new Date(b.date));\n    } catch (error) {\n        console.error('Error getting weekly tasks:', error);\n        throw error;\n    }\n};\nconst applyTaskFilters = (tasks, filters, userProfile)=>{\n    if (!tasks || tasks.length === 0) return tasks;\n    let filteredTasks = [\n        ...tasks\n    ];\n    // Date range filter\n    if (filters.dateFrom) {\n        filteredTasks = filteredTasks.filter((task)=>task.date >= filters.dateFrom);\n    }\n    if (filters.dateTo) {\n        filteredTasks = filteredTasks.filter((task)=>task.date <= filters.dateTo);\n    }\n    // Team filter (tech leads only)\n    if (filters.team && userProfile.role === 'tech-lead') {\n        filteredTasks = filteredTasks.filter((task)=>task.teamName === filters.team);\n    }\n    // Team leader filter (tech leads only)\n    if (filters.teamLeader && userProfile.role === 'tech-lead') {\n        // Find tasks created by employees who report to this team leader\n        filteredTasks = filteredTasks.filter((task)=>{\n            // This requires checking if the task's empId reports to the selected team leader\n            // For now, we'll filter by team since team leaders manage specific teams\n            return task.empId === filters.teamLeader || task.teamName && getTeamLeaderForTeam(task.teamName) === filters.teamLeader;\n        });\n    }\n    // Employee filter (tech leads and team leaders)\n    if (filters.employee && (userProfile.role === 'tech-lead' || userProfile.role === 'team-leader')) {\n        filteredTasks = filteredTasks.filter((task)=>task.empId === filters.employee);\n    }\n    return filteredTasks;\n};\n// Helper function to get team leader for a team\nconst getTeamLeaderForTeam = async (teamName)=>{\n    try {\n        const teamDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_firebaseConfig__WEBPACK_IMPORTED_MODULE_0__.db, 'teams', teamName));\n        if (teamDoc.exists() && teamDoc.data().teamLeaderId) {\n            return teamDoc.data().teamLeaderId;\n        }\n        return null;\n    } catch (error) {\n        console.error('Error getting team leader for team:', teamName, error);\n        return null;\n    }\n};\n// Get filtered tasks with all applied filters\nconst getFilteredTasks = async function(userProfile) {\n    let filters = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    try {\n        // First get all accessible tasks\n        const allTasks = await getTasks(userProfile);\n        // Then apply filters\n        const filteredTasks = applyTaskFilters(allTasks, filters, userProfile);\n        return filteredTasks;\n    } catch (error) {\n        console.error('Error getting filtered tasks:', error);\n        throw error;\n    }\n};\n// -------------------- DROPDOWNS WITH USER CONTEXT --------------------\n// Get dropdown data for a team (with user permission check)\nconst getTeamDropdownData = async (teamName, field, userProfile)=>{\n    try {\n        // Check if user can access this team\n        if (!canUserAccessTeam(userProfile, teamName)) {\n            throw new Error('You do not have permission to access this team data');\n        }\n        // Return predefined values for specific fields - same for all users\n        if (PREDEFINED_VALUES[field]) {\n            return PREDEFINED_VALUES[field];\n        }\n        // For custom dropdown data, fetch from Firestore\n        const docRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_firebaseConfig__WEBPACK_IMPORTED_MODULE_0__.db, 'teams', teamName, 'dropdownData', field);\n        const docSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)(docRef);\n        if (docSnap.exists()) {\n            return docSnap.data().values || [];\n        }\n        return [];\n    } catch (error) {\n        console.error('Error getting team dropdown data:', error);\n        // Always return predefined values as fallback\n        return PREDEFINED_VALUES[field] || [];\n    }\n};\n// Save dropdown data for a team (with user permission check)\nconst saveTeamDropdownData = async (teamName, field, values, userProfile)=>{\n    try {\n        // Check if user can modify this team data (only team leaders and tech leads)\n        if (!canUserAccessTeam(userProfile, teamName) || userProfile.role === 'employee') {\n            throw new Error('You do not have permission to modify team data');\n        }\n        // Don't save predefined values to database\n        if (PREDEFINED_VALUES[field]) {\n            console.warn(\"Cannot save predefined values for field: \".concat(field));\n            return;\n        }\n        const docRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_firebaseConfig__WEBPACK_IMPORTED_MODULE_0__.db, 'teams', teamName, 'dropdownData', field);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.setDoc)(docRef, {\n            values\n        }, {\n            merge: true\n        });\n    } catch (error) {\n        console.error('Error saving team dropdown data:', error);\n        throw error;\n    }\n};\n// -------------------- TEAMS WITH USER CONTEXT --------------------\n// Get teams accessible to user\nconst getTeams = async (userProfile)=>{\n    try {\n        if (!userProfile) return [];\n        return getAccessibleTeams(userProfile);\n    } catch (error) {\n        console.error('Error getting teams:', error);\n        return [];\n    }\n};\n// -------------------- PROJECTS WITH USER CONTEXT --------------------\n// Get team-specific projects (with user permission check)\nconst getTeamProjects = async (teamName, userProfile)=>{\n    try {\n        if (!canUserAccessTeam(userProfile, teamName)) {\n            return [];\n        }\n        return await getTeamDropdownData(teamName, 'projects', userProfile);\n    } catch (error) {\n        console.error('Error getting team projects:', error);\n        return [];\n    }\n};\n// Add new project to team (with user permission check)\nconst addTeamProject = async (teamName, projectId, projectName, userProfile)=>{\n    try {\n        if (!projectId || !projectName) return;\n        if (!canUserAccessTeam(userProfile, teamName) || userProfile.role === 'employee') {\n            return; // Silently fail for employees\n        }\n        const projects = await getTeamProjects(teamName, userProfile);\n        const exists = projects.find((p)=>p.id === projectId);\n        if (!exists) {\n            const newProjects = [\n                ...projects,\n                {\n                    id: projectId,\n                    name: projectName\n                }\n            ];\n            await saveTeamDropdownData(teamName, 'projects', newProjects, userProfile);\n        }\n    } catch (error) {\n        console.error('Error adding team project:', error);\n    // Don't throw error to prevent task creation failure\n    }\n};\n// -------------------- EMPLOYEES WITH USER CONTEXT --------------------\n// Get team-specific employees (with user permission check)\nconst getTeamEmployees = async (teamName, userProfile)=>{\n    try {\n        if (!canUserAccessTeam(userProfile, teamName)) {\n            return [];\n        }\n        return await getTeamDropdownData(teamName, 'employees', userProfile);\n    } catch (error) {\n        console.error('Error getting team employees:', error);\n        return [];\n    }\n};\n// Add new employee to team (with user permission check)\nconst addTeamEmployee = async (teamName, empId, empName, userProfile)=>{\n    try {\n        if (!empId || !empName) return;\n        if (!canUserAccessTeam(userProfile, teamName) || userProfile.role === 'employee') {\n            return; // Silently fail for employees\n        }\n        const employees = await getTeamEmployees(teamName, userProfile);\n        const exists = employees.find((e)=>e.id === empId);\n        if (!exists) {\n            const newEmployees = [\n                ...employees,\n                {\n                    id: empId,\n                    name: empName\n                }\n            ];\n            await saveTeamDropdownData(teamName, 'employees', newEmployees, userProfile);\n        }\n    } catch (error) {\n        console.error('Error adding team employee:', error);\n    // Don't throw error to prevent task creation failure\n    }\n};\n// -------------------- CLIENTS WITH USER CONTEXT --------------------\n// Get team-specific clients (with user permission check)\nconst getTeamClients = async (teamName, userProfile)=>{\n    try {\n        if (!canUserAccessTeam(userProfile, teamName)) {\n            return [];\n        }\n        return await getTeamDropdownData(teamName, 'clients', userProfile);\n    } catch (error) {\n        console.error('Error getting team clients:', error);\n        return [];\n    }\n};\n// Add new client to team (with user permission check)\nconst addTeamClient = async (teamName, clientId, clientName, userProfile)=>{\n    try {\n        if (!clientId || !clientName) return;\n        if (!canUserAccessTeam(userProfile, teamName) || userProfile.role === 'employee') {\n            return; // Silently fail for employees\n        }\n        const clients = await getTeamClients(teamName, userProfile);\n        const exists = clients.find((c)=>c.id === clientId);\n        if (!exists) {\n            const newClients = [\n                ...clients,\n                {\n                    id: clientId,\n                    name: clientName\n                }\n            ];\n            await saveTeamDropdownData(teamName, 'clients', newClients, userProfile);\n        }\n    } catch (error) {\n        console.error('Error adding team client:', error);\n    // Don't throw error to prevent task creation failure\n    }\n};\n// -------------------- UTILITY FUNCTIONS --------------------\n// Get predefined values for a specific field\nconst getPredefinedValues = (field)=>{\n    return PREDEFINED_VALUES[field] || [];\n};\n// Check if field has predefined values\nconst isPredefinedField = (field)=>{\n    return !!PREDEFINED_VALUES[field];\n};\n// Check if team document exists\nconst teamExists = async (teamName)=>{\n    try {\n        const teamDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_firebaseConfig__WEBPACK_IMPORTED_MODULE_0__.db, 'teams', teamName));\n        return teamDoc.exists();\n    } catch (error) {\n        return false;\n    }\n};\n// Initialize default dropdown values for a team (only if team doesn't exist yet)\nconst initializeTeamDefaults = async (teamName)=>{\n    try {\n        const exists = await teamExists(teamName);\n        if (!exists) {\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.setDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_firebaseConfig__WEBPACK_IMPORTED_MODULE_0__.db, 'teams', teamName), {\n                createdAt: new Date().toISOString()\n            });\n        }\n    } catch (error) {\n        console.error('Error initializing team defaults:', error);\n        throw error;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./lib/firebase.js\n"));

/***/ })

});